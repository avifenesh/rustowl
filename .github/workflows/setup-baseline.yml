name: Setup Initial Baseline (Auto-run on PR)

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_setup:
        description: 'Force setup even if baseline exists'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUSTC_BOOTSTRAP: 1

jobs:
  setup-baseline:
    name: Create Initial Performance Baseline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (from rust-toolchain.toml)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        # Automatically reads nightly-2025-04-08 from rust-toolchain.toml

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check if baseline already exists
        id: check-baseline
        uses: actions/cache/restore@v3
        with:
          path: baselines/performance/main/
          key: performance-baseline-latest
          lookup-only: true

      - name: Skip if baseline exists and not forced
        if: steps.check-baseline.outputs.cache-hit == 'true' && github.event.inputs.force_setup != 'true'
        run: |
          echo "✅ Performance baseline already exists, skipping setup"
          echo "💡 Use workflow_dispatch with force_setup=true to recreate"
          echo "SKIP_SETUP=true" >> $GITHUB_ENV

      - name: Install benchmark dependencies
        if: env.SKIP_SETUP != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y bc gnuplot
          cargo install cargo-criterion || true

      - name: Build RustOwl
        if: env.SKIP_SETUP != 'true'
        run: |
          echo "🔨 Building RustOwl for baseline creation..."
          RUSTC_BOOTSTRAP=1 cargo build --release

      - name: Make scripts executable
        if: env.SKIP_SETUP != 'true'
        run: chmod +x scripts/*.sh

      - name: Run initial benchmark
        if: env.SKIP_SETUP != 'true'
        run: |
          echo "📊 Creating initial performance baseline..."
          ./scripts/bench.sh --save main --quiet

      - name: Upload initial baseline artifact
        if: env.SKIP_SETUP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: initial-performance-baseline-${{ github.sha }}
          path: |
            baselines/performance/main/
            target/criterion/report/
          retention-days: 90

      - name: Cache initial baseline
        if: env.SKIP_SETUP != 'true'
        uses: actions/cache/save@v3
        with:
          path: baselines/performance/main/
          key: performance-baseline-latest

      - name: Comment on PR with baseline creation
        if: github.event_name == 'pull_request' && env.SKIP_SETUP != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🎯 Performance Baseline Created
            
            ✅ **Initial performance baseline has been created**
            
            This baseline will be used for performance regression detection in future PRs.
            
            **📊 Baseline Details:**
            - Created from: Current branch/commit (\`${{ github.sha }}\`)
            - Toolchain: \`nightly-2025-04-08\` (from rust-toolchain.toml)
            - Artifacts: Available for 90 days
            - Cache: Stored for future PR comparisons
            
            **🚀 Next Steps:**
            - Future PRs will automatically compare against this baseline
            - Performance regressions > 5% will be flagged
            - This setup workflow can be deleted after successful baseline creation
            
            **💡 Tip:** You can manually trigger baseline recreation using the workflow_dispatch event.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Add baseline-created label
        if: github.event_name == 'pull_request' && env.SKIP_SETUP != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['performance-baseline-created']
            });

      - name: Success notification
        if: env.SKIP_SETUP != 'true'
        run: |
          echo "🎉 SUCCESS: Performance baseline created and cached!"
          echo ""
          echo "📋 Summary:"
          echo "  • Baseline saved to cache with key: performance-baseline-latest"
          echo "  • Artifacts uploaded with 90-day retention"
          echo "  • Future PRs will compare against this baseline"
          echo ""
          echo "🗑️  This setup workflow can now be safely deleted since baseline is established."

      - name: Already exists notification
        if: env.SKIP_SETUP == 'true'
        run: |
          echo "ℹ️  Performance baseline already exists and is cached"
          echo "   No action needed - future PRs will use the existing baseline"
          echo ""
          echo "🔄 To recreate baseline:"
          echo "   • Use workflow_dispatch with force_setup=true"
          echo "   • Or delete the cache and re-run this workflow"