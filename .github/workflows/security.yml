name: Security & Memory Safety

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTC_BOOTSTRAP:  1

jobs:
  security-checks:
    name: Security & Memory Safety Analysis
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, ubuntu-24.04-arm]
        include:
          - os: ubuntu-latest
            runner_os: Linux
          - os: ubuntu-24.04-arm
            runner_os: Linux
          - os: macos-latest
            runner_os: macOS
          - os: windows-latest
            runner_os: Windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (from rust-toolchain.toml)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: miri,rust-src,llvm-tools-preview
          # Automatically reads from rust-toolchain.toml

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (Linux)
        if: matrix.runner_os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Make scripts executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x scripts/*.sh

      - name: Run comprehensive security checks
        shell: bash
        run: |
          # The security script will auto-detect CI environment and install missing tools
          ./scripts/security.sh

      - name: Create security summary and cleanup
        if: always()
        shell: bash
        run: |
          # The security script should have created its own summary
          if [ -f "security-logs/security_summary_*.md" ]; then
            echo "Security script summary found:"
            ls -la security-logs/security_summary_*.md
          else
            echo "Warning: Security script summary not found, creating fallback summary"
            mkdir -p security-logs
            echo "# Security Testing Summary (Fallback)" > security-logs/fallback-summary.txt
            echo "Generated: $(date)" >> security-logs/fallback-summary.txt
            echo "OS: ${{ matrix.os }}" >> security-logs/fallback-summary.txt
            echo "Status: Script may have failed to complete properly" >> security-logs/fallback-summary.txt
          fi
          
          # List all generated logs for debugging
          if [ -d "security-logs" ]; then
            echo "Available security logs:"
            ls -la security-logs/
            echo "Total log directory size: $(du -sh security-logs 2>/dev/null | cut -f1 || echo 'N/A')"
          fi
          
          # Clean up large build artifacts but preserve logs
          if [ -d "target/sanitizer" ]; then
            echo "Cleaning up sanitizer build artifacts..."
            find target/sanitizer -name "*.rlib" -delete 2>/dev/null || true
            find target/sanitizer -name "*.rmeta" -delete 2>/dev/null || true
            find target/sanitizer -name "deps" -type d -exec rm -rf {} + 2>/dev/null || true
            find target/sanitizer -name "incremental" -type d -exec rm -rf {} + 2>/dev/null || true
          fi

      - name: Upload security artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-logs-${{ matrix.os }}-${{ github.run_id }}
          path: |
            security-logs/
            *.trace
            DrMemory-*.log
            drmemory.*.log
            instruments_output*.trace
          retention-days: 7
