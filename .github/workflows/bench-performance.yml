name: Performance Benchmarks

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'benches/**'
      - 'perf-tests/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  CARGO_TERM_COLOR: always
  RUSTC_BOOTSTRAP: 1

jobs:
  benchmark:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain (from rust-toolchain.toml)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        # Automatically reads from rust-toolchain.toml

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install benchmark dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc gnuplot
          cargo install cargo-criterion || true

      - name: Try to restore baseline from cache
        id: restore-baseline
        uses: actions/cache/restore@v3
        with:
          path: baselines/performance/main/
          key: performance-baseline-latest
          restore-keys: |
            performance-baseline-

      - name: Create baseline from main if not found
        if: steps.restore-baseline.outputs.cache-hit != 'true'
        run: |
          echo "No cached baseline found, creating from main branch..."
          
          # Save current state
          CURRENT_SHA=${{ github.sha }}
          
          # Checkout main and create baseline
          git fetch origin main
          git checkout origin/main
          
          # Check if benchmark script exists in main
          if [ -f "./scripts/bench.sh" ]; then
            echo "Benchmark script found in main branch"
            chmod +x ./scripts/bench.sh
            
            # Build main version
            RUSTC_BOOTSTRAP=1 cargo build --release
            
            # Run baseline benchmark
            ./scripts/bench.sh --save main --quiet
            echo "Baseline created successfully from main branch"
            
            # Verify baseline was created
            if [ -d "baselines/performance/main" ]; then
              echo "✅ Baseline directory confirmed: baselines/performance/main"
              ls -la baselines/performance/main/
              
              # Backup baseline before Git operations
              mkdir -p /tmp/baseline-backup
              cp -r baselines/performance/main/* /tmp/baseline-backup/
              echo "✅ Baseline backed up to /tmp/baseline-backup"
            else
              echo "❌ Baseline directory not found after creation"
            fi
          else
            echo "::warning::Benchmark script not found in main branch"
            echo "Will run benchmark without comparison"
          fi
          
          # Switch back to PR branch
          git checkout "$CURRENT_SHA"
          
          # Restore baseline if it was lost during checkout
          if [ ! -d "baselines/performance/main" ] && [ -d "/tmp/baseline-backup" ]; then
            echo "🔄 Restoring baseline from backup..."
            mkdir -p baselines/performance/main
            cp -r /tmp/baseline-backup/* baselines/performance/main/
            echo "✅ Baseline restored successfully"
            ls -la baselines/performance/main/
          fi

      - name: Build RustOwl (PR branch)
        run: |
          RUSTC_BOOTSTRAP=1 cargo build --release

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Debug baseline status
        run: |
          echo "🔍 Checking baseline status before comparison..."
          if [ -d "baselines/performance/main" ]; then
            echo "✅ Baseline found: baselines/performance/main"
            ls -la baselines/performance/main/
            echo "📁 Baseline files:"
            find baselines/performance/main/ -type f -exec echo "  {}: $(cat {})" \;
          else
            echo "❌ No baseline found at: baselines/performance/main"
            echo "🔍 Available directories:"
            find . -name "baselines" -type d 2>/dev/null || echo "No baselines directory found"
            find . -path "*/performance/*" -type d 2>/dev/null || echo "No performance directories found"
          fi

      - name: Run performance comparison
        id: benchmark
        run: |
          echo "🚀 Running benchmark on PR branch..."
          
          # Check if we have a baseline to compare against
          if [ -d "baselines/performance/main" ] && [ "$(ls -A baselines/performance/main 2>/dev/null)" ]; then
            echo "📊 Comparing against main baseline..."
            
            # Show baseline info
            echo "📋 Baseline details:"
            if [ -f "baselines/performance/main/analysis_time.txt" ]; then
              echo "  - Analysis time: $(cat baselines/performance/main/analysis_time.txt)s"
            fi
            if [ -f "baselines/performance/main/test_package.txt" ]; then
              echo "  - Test package: $(cat baselines/performance/main/test_package.txt)"
            fi
            
            # Run comparison and capture exit code
            set +e  # Don't exit on error
            ./scripts/bench.sh --load main --threshold 5%
            BENCH_EXIT_CODE=$?
            set -e
            
            if [ $BENCH_EXIT_CODE -ne 0 ]; then
              echo "REGRESSION_DETECTED=true" >> $GITHUB_OUTPUT
              echo "::warning::Performance regression detected!"
            else
              echo "REGRESSION_DETECTED=false" >> $GITHUB_OUTPUT
              echo "✅ No significant performance regression detected"
            fi
          else
            echo "📝 No baseline available, running benchmark without comparison..."
            ./scripts/bench.sh --save current --quiet
            echo "REGRESSION_DETECTED=false" >> $GITHUB_OUTPUT
            echo "FIRST_RUN=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results-pr-${{ github.event.number }}
          path: |
            target/criterion/report/index.html
            target/criterion/*/report/index.html
            baselines/performance/*/analysis_time.txt
            baselines/performance/*/test_package.txt
            benchmark-summary.txt
          retention-days: 30

      - name: Upload failure logs (on error)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: benchmark-failure-logs-pr-${{ github.event.number }}
          path: |
            benchmark-summary.txt
            baselines/performance/*/
            target/criterion/**/estimates.json
          retention-days: 7

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/comment-benchmark
        with:
          regression-detected: ${{ steps.benchmark.outputs.REGRESSION_DETECTED }}
          first-run: ${{ steps.benchmark.outputs.FIRST_RUN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add regression label
        if: steps.benchmark.outputs.REGRESSION_DETECTED == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['performance-regression']
            });
